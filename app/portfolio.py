import streamlit as st
from PIL import Image
import os
import pandas as pd
import plotly.graph_objects as go
import sys
import base64
import numpy as np

# Import iÃ§in yolu dÃ¼zenleme
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from scraper import scrape_ekonomi_verileri, scrape_borsa_verileri, scrape_kripto_verileri

# datascience fonksiyonlarÄ±nÄ± import etme - sklearn olmayan sÃ¼rÃ¼mÃ¼ kullan
try:
    from app.datascience_no_sklearn import (generate_classification_data, generate_regression_data,
                                    generate_ab_test_data, generate_customer_segmentation_data,
                                    create_random_forest_plot, create_ab_test_plot, 
                                    create_segmentation_plot, create_regression_plot,
                                    accuracy_score)
except ImportError as e:
    st.error(f"ModÃ¼l import hatasÄ±: {e}")
    
    # Acil durum iÃ§in temel fonksiyonlarÄ± tanÄ±mlayalÄ±m
    def generate_classification_data():
        df = pd.DataFrame({
            'yaÅŸ': np.random.normal(40, 10, 100),
            'gelir': np.random.normal(5000, 1000, 100)
        })
        return df, np.random.randint(0, 2, 100)
        
    def create_random_forest_plot(X, y):
        fig = px.bar(x=['yaÅŸ', 'gelir'], y=[0.6, 0.4], title="Ã–zellik Ã–nemleri")
        return None, fig
        
    def generate_ab_test_data():
        return pd.DataFrame({'grup': ['A', 'B'], 'donusum': [0.1, 0.15], 'harcama': [100, 120]})
        
    def create_ab_test_plot(data):
        fig1 = px.bar(data, x='grup', y='donusum', title="DÃ¶nÃ¼ÅŸÃ¼m OranlarÄ±")
        fig2 = px.bar(data, x='grup', y='harcama', title="Harcama MiktarlarÄ±") 
        return fig1, fig2
        
    def generate_customer_segmentation_data():
        return pd.DataFrame({
            'musteri_id': [f"ID{i}" for i in range(100)],
            'yillik_harcama': np.random.normal(1000, 500, 100),
            'alisveris_sikligi': np.random.normal(10, 5, 100),
            'musteri_suresi': np.random.normal(3, 1, 100),
            'segment': np.random.choice(['YÃ¼ksek DeÄŸer', 'Orta DeÄŸer', 'DÃ¼ÅŸÃ¼k DeÄŸer', 'Yeni MÃ¼ÅŸteri'], 100)
        })
        
    def create_segmentation_plot(data):
        return px.scatter_3d(data, x='yillik_harcama', y='alisveris_sikligi', z='musteri_suresi', color='segment')
        
    def generate_regression_data():
        df = pd.DataFrame({
            'reklam_harcamasÄ±': np.random.normal(1000, 300, 100),
            'mÃ¼ÅŸteri_memnuniyeti': np.random.normal(8, 1, 100)
        })
        return df, np.random.normal(5000, 1000, 100)
        
    def create_regression_plot(X, y):
        y_pred = y + np.random.normal(0, 500, len(y))
        fig = px.scatter(x=y, y=y_pred, title="GerÃ§ek vs Tahmin")
        return None, fig
        
    def accuracy_score(y_true, y_pred):
        return sum(np.array(y_true) == np.array(y_pred)) / len(y_true)

import plotly.express as px

st.set_page_config(
    page_title="Tolunay Ã–zcan | Veri SanatÄ±",
    page_icon="ğŸ“Š",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS dosyasÄ±nÄ± okuyup inject et
def load_css(css_file):
    with open(css_file, "r") as f:
        css = f"<style>{f.read()}</style>"
        st.markdown(css, unsafe_allow_html=True)

# Font eklemek iÃ§in
def local_css():
    st.markdown("""
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700&family=Open+Sans:wght@400;600&display=swap">
    """, unsafe_allow_html=True)

# CSS'i yÃ¼kle
load_css("app/style.css")
local_css()

# Sol menÃ¼
with st.sidebar:
    st.markdown("""
    <div style="text-align:center">
        <h1 style="margin-bottom:0">Tolunay Ã–zcan</h1>
        <p style="color:#757575; margin-top:0">KÄ±demli Veri Analisti</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.subheader("HakkÄ±mda")
    st.markdown(
        """
        Veri analizi ve gÃ¶rselleÅŸtirme alanÄ±nda 4+ yÄ±llÄ±k deneyime sahip KÄ±demli Veri Analistiyim. SQL, Python ve VBA konularÄ±nda uzman seviyede bilgi sahibi. CRM veri analizi, Ä°K analitik Ã§Ã¶zÃ¼mleri, Ã§aÄŸrÄ± merkezi ve operasyonel raporlama konularÄ±nda kapsamlÄ± deneyim. Veri odaklÄ± karar alma sÃ¼reÃ§lerini destekleyen analitik Ã§Ã¶zÃ¼mler geliÅŸtirme konusunda uzman.
        """
    )
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.subheader("Ä°letiÅŸim")
    st.markdown("""
        <a href="https://www.linkedin.com/in/tolunayozcan/" target="_blank" style="text-decoration:none;">
            <div style="display:flex; align-items:center; margin-bottom:10px;">
                <img src="https://cdn-icons-png.flaticon.com/512/174/174857.png" width="20" style="margin-right:10px;">
                LinkedIn
            </div>
        </a>
        <a href="https://github.com/TolunayOzcan" target="_blank" style="text-decoration:none;">
            <div style="display:flex; align-items:center; margin-bottom:10px;">
                <img src="https://cdn-icons-png.flaticon.com/512/25/25231.png" width="20" style="margin-right:10px;">
                GitHub
            </div>
        </a>
        <a href="mailto:ornek@email.com" style="text-decoration:none;">
            <div style="display:flex; align-items:center;">
                <img src="https://cdn-icons-png.flaticon.com/512/561/561127.png" width="20" style="margin-right:10px;">
                E-posta
            </div>
        </a>
    """, unsafe_allow_html=True)
    st.markdown("""</div>""", unsafe_allow_html=True)

# Ana iÃ§erik
st.markdown("""
<div style="text-align:center; padding: 2rem 0 1rem 0;">
    <h1 style="font-size: 2.5rem; margin-bottom: 0.5rem;">Veri SanatÄ± PortfÃ¶yÃ¼</h1>
    <p style="color: #757575; font-size: 1.2rem;">Veri analizi ve gÃ¶rselleÅŸtirme Ã¼zerine Ã§alÄ±ÅŸmalarÄ±m</p>
</div>
""", unsafe_allow_html=True)

# MenÃ¼ sekmeleri
menu = st.tabs(["ğŸ“Š Anasayfa", "ğŸ“ˆ Analizler", "ğŸ”„ CanlÄ± Veriler", "ğŸ§ª Veri Bilimi"])

with menu[0]:
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("""
    <h2>HoÅŸ Geldiniz</h2>
    <p>Veri sanatÄ± ve gÃ¶rselleÅŸtirme alanÄ±nda Ã§alÄ±ÅŸmalarÄ±mÄ± bu portfÃ¶yde bulabilirsiniz. 
    Veri odaklÄ± hikaye anlatÄ±mÄ± ve gÃ¶rselleÅŸtirme teknikleriyle karmaÅŸÄ±k verileri anlamlÄ± iÃ§gÃ¶rÃ¼lere dÃ¶nÃ¼ÅŸtÃ¼rÃ¼yorum.</p>
    
    <p>PortfÃ¶yÃ¼mde bulunan Ã§alÄ±ÅŸmalar:</p>
    <ul>
        <li>Ã–zel tasarlanmÄ±ÅŸ veri gÃ¶rselleÅŸtirmeleri</li>
        <li>Ä°nteraktif dashboard projeleri</li>
        <li>GerÃ§ek zamanlÄ± veri analizleri</li>
        <li>SektÃ¶rel trend analiz raporlarÄ±</li>
    </ul>
    """, unsafe_allow_html=True)
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    # Metrikler ekle
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("""<div class="card" style="text-align:center">""", unsafe_allow_html=True)
        st.metric(label="Tamamlanan Proje", value="24+", delta="3 son ayda")
        st.markdown("""</div>""", unsafe_allow_html=True)
    
    with col2:
        st.markdown("""<div class="card" style="text-align:center">""", unsafe_allow_html=True)
        st.metric(label="Veri KaynaklarÄ±", value="15", delta="5 yeni eklendi")
        st.markdown("""</div>""", unsafe_allow_html=True)
        
    with col3:
        st.markdown("""<div class="card" style="text-align:center">""", unsafe_allow_html=True)
        st.metric(label="Memnuniyet OranÄ±", value="97%", delta="2% geÃ§en yÄ±la gÃ¶re")
        st.markdown("""</div>""", unsafe_allow_html=True)

with menu[1]:
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h2>Veri GÃ¶rselleÅŸtirme Galeri</h2>", unsafe_allow_html=True)
    st.markdown("""
    <p>Bu bÃ¶lÃ¼mde Ã§eÅŸitli veri gÃ¶rselleÅŸtirme Ã¶rneklerini bulabilirsiniz. Her gÃ¶rselleÅŸtirme, 
    veri hikayesini en etkili ÅŸekilde anlatmak iÃ§in Ã¶zel olarak tasarlanmÄ±ÅŸtÄ±r.</p>
    """, unsafe_allow_html=True)
    st.markdown("""</div>""", unsafe_allow_html=True)

    # 1. SanatÃ§Ä±larÄ±n DeÄŸerleri
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    csv1 = "app/gallery/ornek_veri1.csv"
    if os.path.exists(csv1):
        df1 = pd.read_csv(csv1)
        st.markdown("<h3>SanatÃ§Ä±lara GÃ¶re DeÄŸerler</h3>", unsafe_allow_html=True)
        
        # Daha profesyonel gÃ¶rÃ¼nÃ¼mlÃ¼ plotly grafik
        fig1 = px.bar(df1, x="name", y="value", 
                     color="value",
                     color_continuous_scale=px.colors.sequential.Blues,
                     title="SanatÃ§Ä±larÄ±n Piyasa DeÄŸerleri")
        fig1.update_layout(
            xaxis_title="SanatÃ§Ä±",
            yaxis_title="DeÄŸer (Bin TL)",
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(showgrid=False),
            yaxis=dict(showgrid=True, gridcolor='rgba(230,230,230,0.8)'),
            margin=dict(t=50, b=50, l=40, r=40),
        )
        st.plotly_chart(fig1, use_container_width=True)
        
        # Ek bilgi/aÃ§Ä±klama
        st.markdown("""
        <p><small>Bu grafik, sanat piyasasÄ±nda Ã¶ne Ã§Ä±kan sanatÃ§Ä±larÄ±n gÃ¼ncel piyasa deÄŸerlerini gÃ¶stermektedir.
        DeÄŸerleri, son satÄ±ÅŸ fiyatlarÄ± ve piyasa trendleri kullanÄ±larak hesaplanmÄ±ÅŸtÄ±r.</small></p>
        """, unsafe_allow_html=True)
    st.markdown("""</div>""", unsafe_allow_html=True)

    # 2. Sanat Eserleri Kategorileri
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    csv2 = "app/gallery/ornek_veri2.csv"
    if os.path.exists(csv2):
        df2 = pd.read_csv(csv2)
        st.markdown("<h3>Sanat Eserleri Kategorileri</h3>", unsafe_allow_html=True)
        
        # Daha profesyonel tablo
        st.markdown("<p>Kategori bazÄ±nda eser sayÄ±larÄ±:</p>", unsafe_allow_html=True)
        st.dataframe(df2, use_container_width=True)
        
        # Daha profesyonel Ã§izgi grafik
        fig2 = px.line(df2, x="kategori", y="sayi", 
                     markers=True,
                     line_shape="spline",
                     color_discrete_sequence=['#1E88E5'],
                     title="Kategori BazÄ±nda Eser SayÄ±larÄ±")
        fig2.update_layout(
            xaxis_title="Kategori",
            yaxis_title="Eser SayÄ±sÄ±",
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(showgrid=False),
            yaxis=dict(showgrid=True, gridcolor='rgba(230,230,230,0.8)'),
            margin=dict(t=50, b=50, l=40, r=40),
        )
        st.plotly_chart(fig2, use_container_width=True)
    st.markdown("""</div>""", unsafe_allow_html=True)

    # 3. Sankey DiyagramÄ±
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    csv3 = "app/gallery/ornek_sankey.csv"
    if os.path.exists(csv3):
        df3 = pd.read_csv(csv3)
        st.markdown("<h3>Veri AkÄ±ÅŸ DiyagramÄ±</h3>", unsafe_allow_html=True)
        st.markdown("""
        <p>Sanat eseri Ã¼retim ve sergileme sÃ¼recinde verilerin akÄ±ÅŸÄ±nÄ± gÃ¶steren Sankey diyagramÄ±.
        Bu gÃ¶rselleÅŸtirme, sÃ¼reÃ§ler arasÄ±ndaki iliÅŸkileri ve veri akÄ±ÅŸÄ±nÄ±n yoÄŸunluÄŸunu gÃ¶stermektedir.</p>
        """, unsafe_allow_html=True)
        
        all_labels = list(pd.unique(df3[["source", "target"]].values.ravel("K")))
        label_to_index = {label: i for i, label in enumerate(all_labels)}
        
        # Daha profesyonel Sankey
        sankey_fig = go.Figure(data=[go.Sankey(
            node=dict(
                pad=15,
                thickness=20,
                line=dict(color="#555555", width=0.5),
                label=all_labels,
                color="#1E88E5"
            ),
            link=dict(
                source=[label_to_index[s] for s in df3["source"]],
                target=[label_to_index[t] for t in df3["target"]],
                value=df3["value"],
                color=['rgba(30, 136, 229, 0.4)'] * len(df3)
            )
        )])
        
        sankey_fig.update_layout(
            title="Veri AkÄ±ÅŸ SÃ¼reÃ§leri",
            font=dict(size=12),
            plot_bgcolor='rgba(0,0,0,0)',
            margin=dict(t=50, b=50, l=40, r=40),
            height=500,
        )
        
        st.plotly_chart(sankey_fig, use_container_width=True)
    st.markdown("""</div>""", unsafe_allow_html=True)

with menu[2]:
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h2>CanlÄ± Finansal Veriler</h2>", unsafe_allow_html=True)
    st.markdown("""
    <p>Bu sayfada Ã§eÅŸitli finansal kaynaklardan elde edilen gÃ¼ncel veriler ve analizleri gÃ¶rebilirsiniz. 
    Veriler, en son piyasa hareketlerini ve ekonomik gÃ¶stergeleri yansÄ±tÄ±r.</p>
    """, unsafe_allow_html=True)
    st.info("Not: Bu veriler Ã¶rnek amaÃ§lÄ±dÄ±r ve gerÃ§ek zamanlÄ± veri Ã§ekimi yerine demo veriler gÃ¶sterilmektedir.")
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    # Ekonomi GÃ¶stergeleri
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h3>Ekonomi GÃ¶stergeleri</h3>", unsafe_allow_html=True)
    ekonomi_df = scrape_ekonomi_verileri()
    
    if not ekonomi_df.empty:
        # Veri tablosu stil iyileÅŸtirmesiyle
        st.markdown("<p><strong>GÃ¼ncel Ekonomik Veriler</strong></p>", unsafe_allow_html=True)
        st.dataframe(ekonomi_df, use_container_width=True)
        
        # Ã–nem derecesine gÃ¶re gÃ¶sterge sayÄ±sÄ± - geliÅŸtirilmiÅŸ grafik
        if 'onem' in ekonomi_df.columns:
            onem_counts = ekonomi_df['onem'].value_counts().reset_index()
            onem_counts.columns = ['Ã–nem Derecesi', 'SayÄ±']
            
            fig = px.pie(onem_counts, values='SayÄ±', names='Ã–nem Derecesi', 
                        title='Ekonomik GÃ¶stergelerin Ã–nem Derecesine GÃ¶re DaÄŸÄ±lÄ±mÄ±',
                        color_discrete_sequence=px.colors.sequential.Blues_r,
                        hole=0.4)
            
            fig.update_layout(
                legend=dict(orientation="h", yanchor="bottom", y=-0.2, xanchor="center", x=0.5),
                margin=dict(t=50, b=50, l=20, r=20),
                plot_bgcolor='rgba(0,0,0,0)'
            )
            
            fig.update_traces(textinfo='percent+label', pull=[0.05, 0, 0], 
                             marker=dict(line=dict(color='#FFFFFF', width=2)))
            
            st.plotly_chart(fig, use_container_width=True)
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    # Borsa ve Kripto Verileri Yan Yana
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""<div class="card">""", unsafe_allow_html=True)
        st.markdown("<h3>Borsa Verileri</h3>", unsafe_allow_html=True)
        borsa_df = scrape_borsa_verileri()
        
        if not borsa_df.empty:
            # Stilize edilmiÅŸ tablo
            st.markdown("<p><strong>GÃ¼ncel Borsa Endeksleri</strong></p>", unsafe_allow_html=True)
            st.dataframe(borsa_df, use_container_width=True)
            
            # Borsa deÄŸiÅŸim yÃ¼zdesi grafiÄŸi - geliÅŸtirilmiÅŸ
            if 'endeks' in borsa_df.columns and 'degisim_yuzde' in borsa_df.columns:
                # YÃ¼zde iÅŸaretini kaldÄ±rÄ±p sayÄ±sal deÄŸere dÃ¶nÃ¼ÅŸtÃ¼r
                borsa_df['degisim_yuzde_numeric'] = borsa_df['degisim_yuzde'].str.rstrip('%').astype('float')
                
                # DeÄŸerlere gÃ¶re renklendirme iÃ§in koÅŸullar
                colors = ['#F44336' if x < 0 else '#4CAF50' for x in borsa_df['degisim_yuzde_numeric']]
                
                fig = px.bar(borsa_df, x='endeks', y='degisim_yuzde_numeric',
                            title='GÃ¼nlÃ¼k DeÄŸiÅŸim (%)',
                            text='degisim_yuzde')
                
                fig.update_layout(
                    xaxis_title="",
                    yaxis_title="DeÄŸiÅŸim (%)",
                    plot_bgcolor='rgba(0,0,0,0)',
                    xaxis=dict(showgrid=False),
                    yaxis=dict(showgrid=True, gridcolor='rgba(230,230,230,0.8)'),
                    margin=dict(t=50, b=20, l=20, r=20)
                )
                
                fig.update_traces(marker_color=colors, textposition='outside')
                st.plotly_chart(fig, use_container_width=True)
        st.markdown("""</div>""", unsafe_allow_html=True)
    
    with col2:
        st.markdown("""<div class="card">""", unsafe_allow_html=True)
        st.markdown("<h3>Kripto Para Verileri</h3>", unsafe_allow_html=True)
        kripto_df = scrape_kripto_verileri()
        
        if not kripto_df.empty:
            st.markdown("<p><strong>GÃ¼ncel Kripto PiyasasÄ±</strong></p>", unsafe_allow_html=True)
            st.dataframe(kripto_df, use_container_width=True)
            
            # Kripto para deÄŸiÅŸim grafiÄŸi - geliÅŸtirilmiÅŸ
            if 'kripto' in kripto_df.columns and 'degisim24h' in kripto_df.columns:
                # YÃ¼zde iÅŸaretini kaldÄ±rÄ±p sayÄ±sal deÄŸere dÃ¶nÃ¼ÅŸtÃ¼r
                kripto_df['degisim_numeric'] = kripto_df['degisim24h'].str.rstrip('%').astype('float')
                
                # DeÄŸerlere gÃ¶re renklendirme iÃ§in koÅŸullar
                colors = ['#F44336' if x < 0 else '#4CAF50' for x in kripto_df['degisim_numeric']]
                
                fig = px.bar(kripto_df, x='kripto', y='degisim_numeric',
                            title='24 Saatlik DeÄŸiÅŸim (%)',
                            text='degisim24h')
                
                fig.update_layout(
                    xaxis_title="",
                    yaxis_title="DeÄŸiÅŸim (%)",
                    plot_bgcolor='rgba(0,0,0,0)',
                    xaxis=dict(showgrid=False),
                    yaxis=dict(showgrid=True, gridcolor='rgba(230,230,230,0.8)'),
                    margin=dict(t=50, b=20, l=20, r=20)
                )
                
                fig.update_traces(marker_color=colors, textposition='outside')
                st.plotly_chart(fig, use_container_width=True)
        st.markdown("""</div>""", unsafe_allow_html=True)
    
    # Son GÃ¼ncellenme Bilgisi
    st.markdown("""<div style="text-align:center; margin-top:20px;">
        <p style="color:#757575; font-size:0.9rem;">Son gÃ¼ncellenme: 22 EylÃ¼l 2025, 14:30</p>
    </div>""", unsafe_allow_html=True)

with menu[3]:
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h2>Veri Bilimi Ã–rnekleri</h2>", unsafe_allow_html=True)
    st.markdown("""
    <p>Bu bÃ¶lÃ¼mde veri bilimi ve makine Ã¶ÄŸrenimi projelerinden Ã¶rnekler bulabilirsiniz.
    Her bir Ã¶rnek, farklÄ± veri bilimi tekniklerini ve algoritmalarÄ± gÃ¶stermektedir.</p>
    """, unsafe_allow_html=True)
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    # Random Forest SÄ±nÄ±flandÄ±rma
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h3>Random Forest SÄ±nÄ±flandÄ±rma Modeli</h3>", unsafe_allow_html=True)
    st.markdown("""
    <p>Random Forest, Ã§ok sayÄ±da karar aÄŸacÄ±nÄ±n birleÅŸiminden oluÅŸan gÃ¼Ã§lÃ¼ bir sÄ±nÄ±flandÄ±rma ve regresyon algoritmasÄ±dÄ±r.
    Bu Ã¶rnek, ikili sÄ±nÄ±flandÄ±rma problemi iÃ§in Random Forest modelinin Ã¶zellik Ã¶nemlerini gÃ¶stermektedir.</p>
    """, unsafe_allow_html=True)
    
    # Random Forest modeli ve gÃ¶rselleÅŸtirme
    with st.spinner("Random Forest modeli hazÄ±rlanÄ±yor..."):
        X, y = generate_classification_data()
        rf_model, rf_fig = create_random_forest_plot(X, y)
        st.plotly_chart(rf_fig, use_container_width=True)
    
    # Model aÃ§Ä±klamasÄ± ve ek bilgi
    with st.expander("Model DetaylarÄ±"):
        st.write("**Random Forest Modeli Parametreleri:**")
        st.code("""
        RandomForestClassifier(
            n_estimators=100,  # AÄŸaÃ§ sayÄ±sÄ±
            random_state=42,   # SonuÃ§larÄ±n tekrarlanabilirliÄŸi iÃ§in
        )
        """)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric(label="Model DoÄŸruluÄŸu", value=f"{accuracy_score(y, rf_model.predict(X)):.2%}")
        with col2:
            st.metric(label="Ã–zellik SayÄ±sÄ±", value=f"{X.shape[1]}")
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    # A/B Test Analizi
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h3>A/B Test Analizi</h3>", unsafe_allow_html=True)
    st.markdown("""
    <p>A/B testleri, iki farklÄ± versiyon arasÄ±ndaki performans farkÄ±nÄ± Ã¶lÃ§mek iÃ§in kullanÄ±lÄ±r.
    Bu Ã¶rnek, bir web sitesi deÄŸiÅŸikliÄŸinin dÃ¶nÃ¼ÅŸÃ¼m oranlarÄ± ve ortalama harcamalar Ã¼zerindeki etkisini gÃ¶stermektedir.</p>
    """, unsafe_allow_html=True)
    
    # A/B test verileri ve gÃ¶rselleÅŸtirmeler
    with st.spinner("A/B test analizi hazÄ±rlanÄ±yor..."):
        ab_data = generate_ab_test_data()
        conversion_fig, spending_fig = create_ab_test_plot(ab_data)
        
        col1, col2 = st.columns(2)
        with col1:
            st.plotly_chart(conversion_fig, use_container_width=True)
        with col2:
            st.plotly_chart(spending_fig, use_container_width=True)
    
    # Test sonuÃ§larÄ± ve anlamÄ±
    with st.expander("Test SonuÃ§larÄ±"):
        st.write("""
        **Test SonuÃ§larÄ±nÄ±n Yorumu:**
        
        B grubu hem dÃ¶nÃ¼ÅŸÃ¼m oranÄ±nda hem de ortalama harcamada daha iyi performans gÃ¶stermiÅŸtir. 
        Bu sonuÃ§lara gÃ¶re, B varyasyonunun kullanÄ±lmasÄ± Ã¶nerilir.
        
        **Ä°statistiksel AnlamlÄ±lÄ±k:**
        
        * DÃ¶nÃ¼ÅŸÃ¼m oranÄ± farkÄ±: % 25 anlamlÄ±lÄ±k
        * Ortalama harcama farkÄ±: % 6.7 anlamlÄ±lÄ±k
        """)
        
        # Ã–zet tablo
        ab_summary = pd.DataFrame({
            'Grup': ['A', 'B'],
            'KullanÄ±cÄ± SayÄ±sÄ±': [ab_data[ab_data['grup'] == 'A'].shape[0], ab_data[ab_data['grup'] == 'B'].shape[0]],
            'DÃ¶nÃ¼ÅŸÃ¼m SayÄ±sÄ±': [ab_data[ab_data['grup'] == 'A']['donusum'].sum(), ab_data[ab_data['grup'] == 'B']['donusum'].sum()],
            'DÃ¶nÃ¼ÅŸÃ¼m OranÄ± (%)': [ab_data[ab_data['grup'] == 'A']['donusum'].mean() * 100, ab_data[ab_data['grup'] == 'B']['donusum'].mean() * 100],
            'Ortalama Harcama (TL)': [ab_data[(ab_data['grup'] == 'A') & (ab_data['donusum'] == 1)]['harcama'].mean(), 
                                    ab_data[(ab_data['grup'] == 'B') & (ab_data['donusum'] == 1)]['harcama'].mean()]
        })
        st.dataframe(ab_summary.round(2), use_container_width=True)
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    # MÃ¼ÅŸteri Segmentasyonu
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h3>MÃ¼ÅŸteri Segmentasyonu</h3>", unsafe_allow_html=True)
    st.markdown("""
    <p>MÃ¼ÅŸteri segmentasyonu, mÃ¼ÅŸterileri benzer Ã¶zelliklere sahip gruplara ayÄ±rma iÅŸlemidir.
    Bu Ã¶rnek, mÃ¼ÅŸterileri harcama, alÄ±ÅŸveriÅŸ sÄ±klÄ±ÄŸÄ± ve mÃ¼ÅŸteri sÃ¼resi deÄŸiÅŸkenlerine gÃ¶re segmentlere ayÄ±rmaktadÄ±r.</p>
    """, unsafe_allow_html=True)
    
    # Segmentasyon verileri ve 3D gÃ¶rselleÅŸtirme
    with st.spinner("MÃ¼ÅŸteri segmentasyonu hazÄ±rlanÄ±yor..."):
        segment_data = generate_customer_segmentation_data()
        segment_fig = create_segmentation_plot(segment_data)
        st.plotly_chart(segment_fig, use_container_width=True)
    
    # Segment Ã¶zeti ve aÃ§Ä±klama
    with st.expander("Segment DetaylarÄ±"):
        st.write("""
        **MÃ¼ÅŸteri Segmentleri:**
        
        * **YÃ¼ksek DeÄŸer:** YÃ¼ksek harcama, yÃ¼ksek alÄ±ÅŸveriÅŸ sÄ±klÄ±ÄŸÄ± ve uzun mÃ¼ÅŸteri sÃ¼resi
        * **Orta DeÄŸer:** Orta seviye harcama, orta sÄ±klÄ±k ve orta mÃ¼ÅŸteri sÃ¼resi
        * **DÃ¼ÅŸÃ¼k DeÄŸer:** DÃ¼ÅŸÃ¼k harcama, dÃ¼ÅŸÃ¼k sÄ±klÄ±k ve kÄ±sa mÃ¼ÅŸteri sÃ¼resi
        * **Yeni MÃ¼ÅŸteri:** DÃ¼ÅŸÃ¼k harcama, dÃ¼ÅŸÃ¼k sÄ±klÄ±k ve Ã§ok kÄ±sa mÃ¼ÅŸteri sÃ¼resi
        """)
        
        # Segment Ã¶zeti tablosu
        segment_summary = segment_data.groupby('segment').agg({
            'musteri_id': 'count',
            'yillik_harcama': 'mean',
            'alisveris_sikligi': 'mean',
            'musteri_suresi': 'mean'
        }).reset_index()
        
        segment_summary.columns = ['Segment', 'MÃ¼ÅŸteri SayÄ±sÄ±', 'Ort. YÄ±llÄ±k Harcama (TL)', 
                                'Ort. AlÄ±ÅŸveriÅŸ SÄ±klÄ±ÄŸÄ± (yÄ±llÄ±k)', 'Ort. MÃ¼ÅŸteri SÃ¼resi (yÄ±l)']
        
        st.dataframe(segment_summary.round(2), use_container_width=True)
    st.markdown("""</div>""", unsafe_allow_html=True)
    
    # Regresyon Modeli
    st.markdown("""<div class="card">""", unsafe_allow_html=True)
    st.markdown("<h3>Regresyon Analizi</h3>", unsafe_allow_html=True)
    st.markdown("""
    <p>Regresyon analizi, deÄŸiÅŸkenler arasÄ±ndaki iliÅŸkileri modelleyerek tahmin yapma yÃ¶ntemidir.
    Bu Ã¶rnek, Random Forest regresyon modelinin gerÃ§ek ve tahmin edilen deÄŸerler arasÄ±ndaki iliÅŸkiyi gÃ¶stermektedir.</p>
    """, unsafe_allow_html=True)
    
    # Regresyon modeli ve gÃ¶rselleÅŸtirme
    with st.spinner("Regresyon modeli hazÄ±rlanÄ±yor..."):
        X_reg, y_reg = generate_regression_data()
        reg_model, reg_fig = create_regression_plot(X_reg, y_reg)
        st.plotly_chart(reg_fig, use_container_width=True)
    
    # Model performans detaylarÄ±
    with st.expander("Model PerformansÄ±"):
        st.write("""
        **Performans Metrikleri:**
        
        * **RÂ²:** Modelin aÃ§Ä±klayÄ±cÄ±lÄ±k gÃ¼cÃ¼nÃ¼ gÃ¶sterir (1.0 ideal)
        * **RMSE:** Tahmin hatalarÄ±nÄ±n karekÃ¶k ortalamasÄ± (dÃ¼ÅŸÃ¼k deÄŸer daha iyi)
        
        **Model Parametreleri:**
        """)
        
        st.code("""
        RandomForestRegressor(
            n_estimators=100,  # AÄŸaÃ§ sayÄ±sÄ±
            random_state=42    # SonuÃ§larÄ±n tekrarlanabilirliÄŸi iÃ§in
        )
        """)
        
        # En Ã¶nemli Ã¶zellikler
        feature_importance = pd.DataFrame({
            'Ã–zellik': X_reg.columns,
            'Ã–nem': reg_model.feature_importances_
        }).sort_values('Ã–nem', ascending=False)
        
        st.write("**En Ã–nemli Ã–zellikler:**")
        st.dataframe(feature_importance, use_container_width=True)
    st.markdown("""</div>""", unsafe_allow_html=True)